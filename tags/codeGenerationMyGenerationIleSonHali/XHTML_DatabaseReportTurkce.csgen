##|TYPE Template
##|UNIQUEID 034E6FDA-7EF7-4457-8DFB-8C5FD2FAA3A2
##|TITLE XHTML Database Report Turkish
##|NAMESPACE Microsoft SQL Server.Reports
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE HTML
##|COMMENTS_BEGIN
Justin Greenwood's HTML raporunun geliştirilmiş halidir. Veritabanı yapısını inceleyerek XHTML bir rapor üretir.Bu rapor Futureware Syntax Coloring Plug-in'e ihtiyac duymaktadır. MyGeneration Web Site'ından indirebilirsiniz

Victor Boctor , Turkish Version Atilla Ozgur
http://www.futureware.biz
##|COMMENTS_END
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE System.Windows.Forms.dll %>
<%#NAMESPACE System, System.Text, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusGuiContext context) : base(context) {}

	public override void Setup()
	{
		if ( !input.Contains("lstTables") || !input.Contains("txtPath") )
		{
			ui.Title = "HTML Database Report";
			ui.Width = 340;
			ui.Height = 600;
	
			// Grab default output path
			string sOutputPath = "";
			if (input.Contains("defaultOutputPath")) 
			{
				sOutputPath = input["defaultOutputPath"].ToString();
			}
	
			// Display and errors here
			GuiLabel lblError = ui.AddLabel("lblError", "", "");
			lblError.ForeColor = "Red";
	
			// Setup Folder selection input control.
			GuiLabel lblPath = ui.AddLabel("lblPath", "Select the output path:", "Select the output path in the field below.");
			GuiTextBox outpath = ui.AddTextBox("txtPath", sOutputPath, "Select the Output Path.");
			GuiFilePicker btnSelectPath = ui.AddFilePicker("btnPath", "Select Path", "Select the Output Path.", "txtPath", true);
	
			// Setup Database selection combobox.
			GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
			GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.");
	
			// Setup Tables selection multi-select listbox.
			GuiLabel label_t = ui.AddLabel("lblTables", "Select tables:", "Select tables from the listbox below.");
			GuiListBox lstTables = ui.AddListBox("lstTables", "Select tables.");
			lstTables.Height = 80;
	
			// Setup Views selection multi-select listbox.
			GuiLabel label_v = ui.AddLabel("lblViews", "Select views:", "Select views from the listbox below.");
			GuiListBox lstViews = ui.AddListBox("lstViews", "Select views.");
			lstViews.Height = 80;
	
			// Setup Procedures selection multi-select listbox.
			GuiLabel label_p = ui.AddLabel("lblProcs", "Select procedures:", "Select procedures from the listbox below.");
			GuiListBox lstProcs = ui.AddListBox("lstProcs", "Select procedures.");
			lstProcs.Height = 80;
	
			// Attach the onchange event to the cmbDatabases control.
			setupDatabaseDropdown(cmbDatabases, lblError);
			cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
	
			ui.ShowGui = true;
		}
		else 
		{
			ui.ShowGui = false;
		}
	}
	
	public void setupDatabaseDropdown(GuiComboBox cmbDatabases, GuiLabel lblError)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					bindTables(cmbDatabases.SelectedValue);
					bindViews(cmbDatabases.SelectedValue);
					bindProcedures(cmbDatabases.SelectedValue);
				}
	
				lblError.Text = "";
			}
			else
			{
				lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstTables = ui["lstTables"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstTables.BindData(db.Tables);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	
	public void bindViews(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstViews = ui["lstViews"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstViews.BindData(db.Views);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void bindProcedures(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstProcs = ui["lstProcs"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstProcs.BindData(db.Procedures);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
		bindViews(cmbDatabases.SelectedText);
		bindProcedures(cmbDatabases.SelectedText);
	}
	
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE System.Web.dll %><%#NAMESPACE System.IO, System, System.Text, System.Collections, System.Web, Zeus, Zeus.DotNetScript %><% 
//////////////////////////////////////////////////////////////////////////////////////////////
// XHTML Database Report
//
// C# class generation script for MyGeneration
// (c) 2005 - Justin Greenwood
// (c) 2006 - Victor Boctor
//
// The most current release of this template can be found at the MyGeneration template
// library: http://www.mygenerationsoftware.com/TemplateLibrary
//
// This template generates an XHTML report that documents the 
// a database including tables, indices, views, and stored procedures.
//
// NOTE: **** A PLUG-IN IS NEEDED ****
// Futureware.SyntaxColoring plug-in being installed.
//
//////////////////////////////////////////////////////////////////////////////////////////////

// TODO: Remember settings from last template run.
// TODO: Move <hr> style to the style definition block.
// TODO: Consider an option to enable/disable syntax coloring
// TODO: Check if more information can be extracted from MyMeta.

public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusTemplateContext context) : base(context) {}

	public override void Render()
	{
		string databaseName = input["cmbDatabase"].ToString(); 		
		ArrayList tables = input["lstTables"] as ArrayList;	
		ArrayList views = input["lstViews"] as ArrayList;	
		ArrayList procs = input["lstProcs"] as ArrayList;	
		IDatabase database = MyMeta.Databases[databaseName];

		// Filename info
		string filepath = input["txtPath"].ToString();
		if (!filepath.EndsWith("\\") ) filepath += "\\";
		
		// Build the filename
		string filename = filepath + "db_report_" + databaseName + ".html";

		output.setPreserveSource(filename, "<!--::", "::-->");

%>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html> 
<head> 
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Tables</title> 
<%= output.getPreserveBlock("customHeaders") %>
<style type="text/css"><!-- 
body, td, th
{
	font-family:arial;
	font-size:9pt;
}

p
{
	margin-top:8px;
	margin-bottom:8px;

}

p.authorinfo
{
	color:darkblue;
	font-size:10pt;
	font-style:italic;
}

h1, h2, h3, h4
{
	color:blue;
}

table 
{
	border: black 1px solid;
}

th 
{
	color: dark blue;
	background-color: #9999ff;
	font-weight: bold;
}

td
{
	color: dark blue;
	background-color: #ccccff;
}

h1
{
	font-size:20pt;
	margin-bottom:4px;
}

h2
{
	font-size:16pt;
	font-style:italic;
	margin-bottom:2px;
}

h3
{
	font-size:12pt;
	font-style:italic;
	margin-bottom:1px;
}

h4
{
	font-size:10pt;
	margin-bottom:1px;
}
--></style>
</head> 
<body>
<h1>Veritabanı Raporu: <%= databaseName %></h1>
<%= DateTime.Now.ToString() %>
<a name="TOC"></a>
<h3>İçindekiler</h3>
<ul>
	<li>Tablolar:
		<ol><%
		foreach (string tableName in tables)
		{
			ITable table = database.Tables[tableName];
%>
			<li><a href="#<%= tableName.Replace(" ", String.Empty) %>"><%=table.Schema%>.<%= tableName %></a></li>
<%
		}
%>
		</ol>
	</li>
	<li>Görüntüler:
		<ol><%
		foreach (string viewName in views)
		{
%>
			<li><a href="#<%= viewName.Replace(" ", String.Empty) %>"><%= viewName %></a></li>
<%
		}
%>
		</ol>
	</li>
	<li>Saklanmış Yordamlar:
		<ol><%
		foreach (string procName in procs)
		{
%>
			<li><a href="#PROC_<%= procName.Replace(" ", String.Empty) %>"><%= procName %></a></li>
<%
		}
%>
		</ol>
	</li>
</ul>
<%
		foreach (string tableName in tables)
		{
			ITable table = database.Tables[tableName];
%>
<hr width="100%" style="color: blue" />
<a name="<%= table.Name.Replace(" ", String.Empty) %>"></a>
<a href="#TOC">İçindekiler</a>
<h3>Tablo:<%=table.Schema%>.<%=table.Name %></h3>
<h4>Tanım: <%= table.Description %></h4>
<h4>Kolonlar</h4>
<table>
	<tr>
		<th nowrap="nowrap">Kolon İsmi</th>
		<th nowrap="nowrap">Veri Yapısı</th>
		<th nowrap="nowrap">Anahtar mı?</th>
		<th nowrap="nowrap">Null mu?</th>
		<th nowrap="nowrap">Hesaplanan Kolon?</th>
		<th nowrap="nowrap">Otomatik Anahtar?</th>
		<th nowrap="nowrap">Varsayılan</th>
		<th nowrap="nowrap">Tanım</th>
	</tr>
<%
		foreach (IColumn column in table.Columns)
		{
%>
	<tr>
		<td nowrap="nowrap" valign="top"><%= column.Name %></td>
		<td nowrap="nowrap" valign="top"><%= column.DataTypeNameComplete.ToString() %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsInPrimaryKey ? "Evet" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsNullable ? "Evet" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsComputed ? "Evet" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsAutoKey ? "Evet" : "&nbsp;" %></td>
		<td valign="top"><%= column.Default %>&nbsp;</td>
		<td valign="top"><%= column.Description %>&nbsp;</td>
	</tr>
<%
		}
%>
</table>

<h4>İkincil Anahtarlar</h4> 
<table>
	<tr>
		<th nowrap="nowrap">İsmi</th>
		<th nowrap="nowrap">İkinci Tablo</th>
		<th nowrap="nowrap">Birinci Anahtar</th>
	</tr>
<%
		foreach (IForeignKey fkey in table.ForeignKeys)
		{
%>
	<tr>
		<td nowrap="nowrap" valign="top"><%= fkey.Name %></td>
		<td nowrap="nowrap" valign="top"><%= fkey.ForeignTable.Name %></td>
		<td nowrap="nowrap" valign="top"><%= fkey.PrimaryKeyName %></td>
	</tr>
<%
		}
%>
</table>

<h4>Indexes</h4> 
<table>
	<tr>
		<th nowrap="nowrap">İsmi</th>
		<th nowrap="nowrap">Eşsiz</th>
		<th nowrap="nowrap">Clustered</th>
		<th nowrap="nowrap">Tipş</th>
		<th nowrap="nowrap">Collation</th>
		<th nowrap="nowrap">Doldurulma Oranı</th>
	</tr>
<%
		foreach (IIndex index in table.Indexes)
		{
%>
	<tr>
		<td nowrap="nowrap" valign="top"><%= index.Name %></td>
		<td nowrap="nowrap" valign="top"><%= index.Unique ? "Yes" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= index.Clustered ? "Yes" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= index.Type %></td>
		<td nowrap="nowrap" valign="top"><%= index.Collation.ToString() %></td>
		<td nowrap="nowrap" valign="top"><%= index.FillFactor.ToString() %></td>
	</tr>
<%
		}
%>
</table>
<%
	}

	foreach (string viewName in views)
	{
		IView view = database.Views[viewName];
%>
<hr width="100%" style="color: blue" />
<a name="<%= view.Name.Replace(" ", String.Empty) %>"></a>
<a href="#TOC">Table of Contents</a>
<h3>View: <%= view.Name %></h3>
<h4>Columns</h4> 
<table>
	<tr>
		<th nowrap="nowrap">Column Name</th>
		<th nowrap="nowrap">Data Type</th>
		<th nowrap="nowrap">Is in Key?</th>
		<th nowrap="nowrap">Is Nullable?</th>
		<th nowrap="nowrap">Is Computed?</th>
		<th nowrap="nowrap">Is AutoKey?</th>
		<th nowrap="nowrap">Varsayılan</th>
		<th nowrap="nowrap">Description</th>
	</tr>
<%
		foreach (IColumn column in view.Columns)
		{
%>
	<tr>
		<td nowrap="nowrap" valign="top"><%= column.Name %></td>
		<td nowrap="nowrap" valign="top"><%= column.DataTypeNameComplete.ToString() %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsInPrimaryKey ? "Yes" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsNullable ? "Yes" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsComputed ? "Yes" : "&nbsp;" %></td>
		<td nowrap="nowrap" valign="top"><%= column.IsAutoKey ? "Yes" : "&nbsp;" %></td>
		<td valign="top"><%= column.Default %>&nbsp;</td>
		<td valign="top"><%= column.Description %>&nbsp;</td>
	</tr>
<%
		}
%>
</table>
<pre><%= SyntaxColoring.TSqlToHtml(view.ViewText) %></pre>
<%
	}

	foreach (string procName in procs)
	{
		IProcedure proc = database.Procedures[procName];
%>
<hr width="100%" style="color: blue" />
<a name="PROC_<%= proc.Name.Replace(" ", String.Empty) %>"></a>
<a href="#TOC">Table of Contents</a>
<h3>Stored Procedure: <%= proc.Name %></h3>
<h4>Parameters</h4> 
<table>
	<tr>
		<th nowrap="nowrap">Name</th>
		<th nowrap="nowrap">Data Type</th>
		<th nowrap="nowrap">Direction?</th>
		<th nowrap="nowrap">Is Nullable?</th>
		<th nowrap="nowrap">Varsayılan</th>
		<th nowrap="nowrap">Description</th>
	</tr>
<%
		foreach (IParameter parm in proc.Parameters)
		{
%>
	<tr>
		<td nowrap="nowrap" valign="top"><%= parm.Name %></td>
		<td nowrap="nowrap" valign="top"><%= parm.DataTypeNameComplete.ToString() %></td>
		<td nowrap="nowrap" valign="top"><%= parm.Direction.ToString() %></td>
		<td nowrap="nowrap" valign="top"><%= parm.IsNullable ? "Yes" : "&nbsp;" %></td>
		<td valign="top"><%= parm.Default == null ? "": parm.Default.ToString() %>&nbsp;</td>
		<td valign="top"><%= parm.Description %>&nbsp;</td>
	</tr>
<%
		}
%>
</table>
<pre><%= SyntaxColoring.TSqlToHtml(proc.ProcedureText) %></pre>
<%
	}
%>
</body>
</html>
<%
		output.save(filename, "o");
	}
}
%>
##|BODY_END
